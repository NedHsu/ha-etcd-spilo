version: '3.8'

services:
  etcd:
    image: quay.io/coreos/etcd:v3.5.6
    container_name: etcd
    command: >
      /usr/local/bin/etcd
      --name etcd0
      --data-dir /etcd-data
      --advertise-client-urls http://0.0.0.0:2379
      --listen-client-urls http://0.0.0.0:2379
    ports:
      - "2379:2379"
    networks:
      - spilo-net
    volumes:
      - etcd-data:/etcd-data

  redis-node1:
    image: redis:7.2
    container_name: redis-node1
    command: >
      redis-server 
      --port 6379 
      --cluster-enabled yes 
      --cluster-config-file nodes.conf 
      --cluster-node-timeout 5000 
      --appendonly yes 
      --requirepass "${REDIS_PASSWORD}"
    ports:
      - "6379:6379"
      - "16379:16379"
    networks:
      - spilo-net
    volumes:
      - redis-node1-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis-node2:
    image: redis:7.2
    container_name: redis-node2
    command: >
      redis-server 
      --port 6379 
      --cluster-enabled yes 
      --cluster-config-file nodes.conf 
      --cluster-node-timeout 5000 
      --appendonly yes 
      --requirepass "${REDIS_PASSWORD}"
    ports:
      - "6380:6379"
      - "16380:16379"
    networks:
      - spilo-net
    volumes:
      - redis-node2-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis-node3:
    image: redis:7.2
    container_name: redis-node3
    command: >
      redis-server 
      --port 6379 
      --cluster-enabled yes 
      --cluster-config-file nodes.conf 
      --cluster-node-timeout 5000 
      --appendonly yes 
      --requirepass "${REDIS_PASSWORD}"
    ports:
      - "6381:6379"
      - "16381:16379"
    networks:
      - spilo-net
    volumes:
      - redis-node3-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis-init:
    image: redis:7.2
    container_name: redis-init
    command: >
      bash -c "
        chmod +x /scripts/init-cluster-container.sh &&
        /scripts/init-cluster-container.sh
      "
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - spilo-net
    volumes:
      - ./redis/init-cluster-container.sh:/scripts/init-cluster-container.sh
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3

  spilo-node1:
    image: registry.opensource.zalan.do/acid/spilo-14:latest
    container_name: spilo-node1
    environment:
      CLUSTER_NAME: spilo-cluster
      SCOPE: spilo-cluster
      APIPORT: 8008
      PGPORT: 5432
      PGUSER_SUPERUSER: postgres
      PGPASSWORD_SUPERUSER: ${POSTGRES_PASSWORD}
      PGUSER_STANDBY: standby
      PGPASSWORD_STANDBY: ${PGPASSWORD_STANDBY}

      # 本地存儲相關配置
      WAL_RESTORE_TIMEOUT: 0
      USE_WALG_BACKUP: true
      USE_WALG_RESTORE: true
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_REGION=${AWS_REGION}
      WALG_COMPRESSION_METHOD: lz4
      WALG_BACKUP_COMPRESSION_METHOD: lz4
      WALG_UPLOAD_CONCURRENCY: 4
      WALG_DOWNLOAD_CONCURRENCY: 4
      WALG_DELTA_MAX_STEPS: 1
      WALG_BACKUP_FROM_REPLICA: true
      WALG_FILE_PREFIX: "/backups/spilo"
    depends_on:
      - etcd
    ports:
      - "5433:5432"
      - "8009:8008"
    networks:
      - spilo-net
    volumes:
      - spilo-data-node1:/home/postgres/pgdata
      - ./backups:/backups

  spilo-node2:
    image: registry.opensource.zalan.do/acid/spilo-14:latest
    container_name: spilo-node2
    environment:
      CLUSTER_NAME: spilo-cluster
      SCOPE: spilo-cluster
      APIPORT: 8008
      PGPORT: 5432
      PGUSER_SUPERUSER: postgres
      PGPASSWORD_SUPERUSER: ${POSTGRES_PASSWORD}
      PGUSER_STANDBY: standby
      PGPASSWORD_STANDBY: ${PGPASSWORD_STANDBY}
      STANDBY_HOST: spilo-node1
      STANDBY_PORT: 5432

      # 本地存儲相關配置
      WAL_RESTORE_TIMEOUT: 0
      USE_WALG_BACKUP: true
      USE_WALG_RESTORE: true
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_REGION=${AWS_REGION}
      WALG_COMPRESSION_METHOD: lz4
      WALG_BACKUP_COMPRESSION_METHOD: lz4
      WALG_UPLOAD_CONCURRENCY: 4
      WALG_DOWNLOAD_CONCURRENCY: 4
      WALG_DELTA_MAX_STEPS: 1
      WALG_BACKUP_FROM_REPLICA: true
      WALG_FILE_PREFIX: "/backups/spilo"
    depends_on:
      - etcd
    ports:
      - "5434:5432"
      - "8010:8008"
    networks:
      - spilo-net
    volumes:
      - spilo-data-node2:/home/postgres/pgdata
      - ./backups:/backups

  spilo-node3:
    image: registry.opensource.zalan.do/acid/spilo-14:latest
    container_name: spilo-node3
    environment:
      CLUSTER_NAME: spilo-cluster
      SCOPE: spilo-cluster
      APIPORT: 8008
      PGPORT: 5432
      PGUSER_SUPERUSER: postgres
      PGPASSWORD_SUPERUSER: ${POSTGRES_PASSWORD}
      PGUSER_STANDBY: standby
      PGPASSWORD_STANDBY: ${PGPASSWORD_STANDBY}
      STANDBY_HOST: spilo-node1
      STANDBY_PORT: 5432

      # 本地存儲相關配置
      WAL_RESTORE_TIMEOUT: 0
      USE_WALG_BACKUP: true
      USE_WALG_RESTORE: true
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_REGION=${AWS_REGION}
      WALG_COMPRESSION_METHOD: lz4
      WALG_BACKUP_COMPRESSION_METHOD: lz4
      WALG_UPLOAD_CONCURRENCY: 4
      WALG_DOWNLOAD_CONCURRENCY: 4
      WALG_DELTA_MAX_STEPS: 1
      WALG_BACKUP_FROM_REPLICA: true
      WALG_FILE_PREFIX: "/backups/spilo"
    depends_on:
      - etcd
    ports:
      - "5435:5432"
      - "8011:8008"
    networks:
      - spilo-net
    volumes:
      - spilo-data-node3:/home/postgres/pgdata
      - ./backups:/backups

  haproxy:
    image: haproxy:2.7
    container_name: haproxy
    depends_on:
      - spilo-node1
      - spilo-node2
      - spilo-node3
    ports:
      - "5000:5000"
      - "5001:5001"
    networks:
      - spilo-net
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_SERVER_JSON_FILE=/pgadmin4/servers.json
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5050:80"
    networks:
      - spilo-net
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
      - ./pgadmin/entrypoint.sh:/entrypoint-custom.sh:ro
    entrypoint: ["/bin/bash", "/entrypoint-custom.sh"]
    depends_on:
      - haproxy
      - spilo-node1
      - spilo-node2
      - spilo-node3

volumes:
  etcd-data:
  spilo-data-node1:
  spilo-data-node2:
  spilo-data-node3:
  pgadmin-data:
  redis-node1-data:
  redis-node2-data:
  redis-node3-data:

networks:
  spilo-net:
    driver: bridge